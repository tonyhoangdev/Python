/*!
    @page ${ProjectName}_group ${ProjectName_Beautified}
    @brief Example application
    
    ## Application description ##
    \warning   Enter here the application description eg: 
    The purpose of this demo application is to show you the usage of a subset of the peripherals found
    on the S32K144 SoC. 

    - The application uses LPIT to trigger ADC conversions every 100ms via TRGMUX with the CPU in sleep
    mode. The ADC is using Hardware Compare feature to validate an conversion only if the value is  
    greater than half of the reference voltage, in this case \b VDD/2. This way the CPU is woken up from  
    sleep mode only if the condition is met. 

    - When the conversion is complete the data is transformed into a bar graph and it is sent via LPUART
    using DMA memory to peripheral transfer to the host PC. This way, the CPU can be put into a low
    power mode to reduce the energy used.
    
    ## Prerequisites ##
    \warning  Enter here the application hw requirements eg:
    The run the example you will need to have the following items:
    - 1 S32K144 board
    - 1 Power Adapter 12V
    - 3 Dupont male to male cable
    - 1 Personal Computer
    - 1 Jlink Lite Debugger (optional, users can use Open SDA)
    
    ## Boards supported ##
    \warning   Enter here the boards supported eg: 
    The following boards are supported by this application:
    - FRDM-PK144-Q100
    - S32K144-MB
    
    ## Hardware Wiring ##
    \warning Enter here what connections are needed to allow this example to work eg:
    
    The following connections must be done to for this example application to work:
    
    PIN FUNCTION    |	FRDM-PK144-Q100	        |	S32K144-MB
    ----------------|---------------|--------------
    ALARM_LED	    |RED   - PTD15	|	LED0 - PTC0
    SECONDS_LED	    |GREEN - PTD16  |	LED1 - PTC1
    ALARM BUTTON	|BTN1  - PTC13  |   BTN3 - PTC13
    
    ## How to run ##
    
    #### 1. Importing the project into the workspace ####
    After opening S32 Design Studio, go to \b File -> \b New \b S32DS \b Project \b From... and select \b ${ProjectName}. Then click on \b Finish. \n
    The project should now be copied into you current workspace.
    #### 2. Generating the Processor Expert configuration ####
    First go to \b Project \b Explorer View in S32 DS and select the current project(\b ${ProjectName}). Then go to \b Project and click on \b Generate \b Processor \b Expert \b Code \n
    Wait for the code generation to be completed before continuing to the next step.
    #### 3. Building the project ####
    Select the configuration to be built \b FLASH (Debug_FLASH) or \b RAM (Debug_RAM) by left clicking on the downward arrow corresponding to the \b build button(@image hammer.png). 
    Wait for the bulid action to be completed before continuing to the next step.
    #### 4. Building the project ####
    Go to \b Run and select \b Debug \b Configurations. There will be four debug configurations for this project:
     Configuration Name | Description
     -------------------|------------
     \b ${ProjectName} \b Debug_RAM \b Jlink | Debug the RAM configuration using Segger Jlink debuggers
     \b ${ProjectName} \b Debug_FLASH \b Jlink | Debug the FLASH configuration using Segger Jlink debuggers
     \b ${ProjectName} \b Debug_RAM \b PEMicro | Debug the RAM configuration using PEMicro debuggers 
     \b ${ProjectName} \b Debug_FLASH \b PEMicro | Debug the FLASH configuration using PEMicro debuggers 
    \n Select the desired debug configuration and click on \b Launch. Now the perspective will change to the \b Debug \b Perspective. \n
    Use the controls to control the program flow.
    
    @note For more detailed information related to S32 Design Studio usage please consult the available documentation.
    
    ## Notes ##
    \warning Enter here if there are special considerations for the example, eg:
    
    - This example runs only on flash
*/
